pipeline {
  agent any

  parameters {
    booleanParam(name : 'BUILD_DOCKER_IMAGE', defaultValue : true, description : 'BUILD_DOCKER_IMAGE')
    booleanParam(name : 'RUN_TEST', defaultValue : true, description : 'RUN_TEST')
    booleanParam(name : 'PUSH_DOCKER_IMAGE', defaultValue : true, description : 'PUSH_DOCKER_IMAGE')
    booleanParam(name : 'DEPLOY_WORKLOAD', defaultValue : true, description : 'DEPLOY_WORKLOAD')

    string(name : "AWS_ACCOUNT_ID", defaultValue : '737765943880', description : 'AWS_ACCOUNT_ID')
    string(name : "DOCKER_IMAGE_NAME", defaultValue : 'demon', description : 'DOCKER_IMAGE_NAME')
    string(name : "DOCKER_TAG", defaultValue : '1', description : 'DOCKER_TAG')
  }

  environment {
    REGION = "ap-northeast-1"
    ECR_REPOSITORY = "${params.AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-1.amazonaws.com"
    DOCKER_IMAGE = "${ECR_REPOSITORY}/${params.DOCKER_IMAGE_NAME}:${params.DOCKER_TAG}"
  }

  stages {
    stage('============ Build Docker Image ============') {
        when { 
            expression { return params.BUILD_DOCKER_IMAGE } 
        }
        steps {
            dir("${env.WORKSPACE}") {
                sh 'docker build -t ${DOCKER_IMAGE} .'
            }
        }
        post {
            always {
                echo "Docker build success!"
            }
        }
    }
    stage('============ Run test code ============') {
        when { expression { return params.RUN_TEST} }
        steps {
            sh('docker run --rm ${DOCKER_IMAGE} /root/.local/bin/pytest -v')
        }
    }
    stage('============ Push Docker Image ============') {
        when { expression { return params.PUSH_DOCKER_IMAGE } }
        steps {
            echo "Push Docker Image to ECR"
            sh'''
                aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY}
                docker push ${DOCKER_IMAGE}
            '''
        }
    }
    stage('============ Deploy workload ============') {
        when { expression { return params.DEPLOY_WORKLOAD } }
        steps {
            echo "Deploy workload"
            }
        }
    }
    /// A --> B
    
    // A ----
    //      B ---->
    post {
        success {
            slackSend(
                channel: "#jenkins_test",
                color: "good",
                message: "[Successful] Job:${env.JOB_NAME}, Build num:#${env.BUILD_NUMBER} (<${env.RUN_DISPLAY_URL}|open job detail>)"
            )            
        }
        failure {
            slackSend(
                channel: "#jenkins_test",
                color: "danger",
                message: "[Failed] Job:${env.JOB_NAME}, Build num:#${env.BUILD_NUMBER} @channel (<${env.RUN_DISPLAY_URL}|open job detail>)"
            )
        }        
    }

}


